
Control flow statements:
   Controlling flow of execution

1) Sequence: Sequence of statements
2) Selection: if-else
    if <condition>:
        <body of if>

Python dont have brackets to define scope. It does the same with the help of indentation. (Block scope)

Below is the "C" language code:
if (x > 10)
    printf("Hello");
    if (y > 20)
        printf("Its a catch");
else
    printf("Caught");

Inputs: i)   x = 11, y = 10
        ii)  x = 11, y = 21
	iii) x = 9, y = 10
C language follows lexical scope. The 'else' in above code is associated with second 'if',
whereas in python 'else' is associated with outer 'if'.

Python supports multivalue assignment.
x,y=10,20    # Here 10 is assigned to x and 20 is assigned to y.
>>> x,y=10,20
>>> x
10
>>> y
20

WAP to accept two numbers and substract smaller one from larger number and print result.
WAP to accept 3 numbers and print max of them.
WAP to accept 3 numbers and print min of them.
Rewrite a string rotation code using if-else to print result (whether rotation or not).
WAP to accept sentence from user and "not that bad" string with "good".
e.g. input  --> Australiya played not that bad but still they lost.
     output --> Australiya played good but still they lost.
WAP to accept a string and perform verbing operation on it.
Rules: Length >= 3
       Add "ing" to its end if its not present.
       If its ending in "ing", "ing" shound be replaced by "ly".
       If length < 3 characters, leave it unchanged.

WAP to accept number of donuts:
	if (donuts > 10)
	    print: Number of donuts many
	if (donuts < 10)
	    print: Number of donuts <donut_count>

WAP to accept a string and return a string having first 2 and last 2 characters of input string.
e.g. Input: spring, Output: spng
>>> str1[:2]+str1[-2:]

Lecture 5:
Accept 2 strings and swap first two characters of each string.
e.g. Input: str1=dog, str2=dinner
    Output: str1=dig, str2=donner


Control flow statements:
C) Repeatitions (Loops):
    I) Enumeration controlled: Where number of iterations is already known
    II) Logically controlled: Loop termination is depends on some logical condition
a) for loop:
    for <loop_variable> in <iterable-container>
             <body of for>

>>> for x in range(10):
...     print(x)
...
0
1
2
3
4
5
6
7
8
9
>>>
range() is a built in function to generate list of numbers. e.g. range(10) generates list of numbers from 0 to 9.
range(<start_index>, <end_index>, <step_value>)
e.g. range(1,10)  ---> It will generate list from 1 to 10.

"For" loop on a string iterates string character by character.
>>> for x in "India":
...     print(x)
...
I
n
d
i
a
>>>

for(i = 0; i< 10000; i++);    // This is do nothing loop in C. Also known as "time delay" loop.
Python syntax:
    for _ in range(10000):   // Here '_' is an anonymous variable.
        pass                 // Its a null operation. Nothing executes here.

Nested for loop:
>>> for x in range(3):
...     for y in range(2):
...             print(x,y)
...
0 0
0 1
1 0
1 1
2 0
2 1
>>>

WAP to accept integer from user and print its table.

b) while loop:
    while <condition>:
        <body>
>>>
>>> ch=""
>>> while ch!='n':
...     print(ch)
...     ch=input("Enter string. Enter 'n' to stop: ")
...

Enter string. Enter 'n' to stop: Test
Test
Enter string. Enter 'n' to stop: again
again
Enter string. Enter 'n' to stop: n
>>>
>>>

Based on condition test, loops are categorized as: pre-test, post-test and mid-test.

D) Jump Statements: break, return, continue
   - break: To break the current loop
	>>> while True:
	...     i=eval(input("Enter number: "))
	...     if i==10:
	...             break;
	...     print(i)
	...
	Enter number: 2
	2
	Enter number: 3
	3
	Enter number: 4
	4
	Enter number: 67
	67
	Enter number: 10
	>>>
	>>>
   
   - continue: To go to the condition check
	>>>
	>>> i=0;
	>>> while i < 10:
	...     if (i%2==0):
	...             i+=1
	...             continue;
	...     print(i)
	...     i+=1
	...
	1
	3
	5
	7
	9
	>>>
	>>>

    -return: It returns the control to caller.

In python, there is provision to add else block to a loop.
Note: The else block just after for/while is executed only when the loop is NOT terminated by a break statement.

WAP to find factorial of a number.

Functions:
'def' is a keyword used to define a function.
e.g. def factorial(number):
         body

WAP to find factorial of a number using function.
Rewrite code for previous assignments using function.
